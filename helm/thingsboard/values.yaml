#
# Copyright Â© 2016-2020 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

global:
  image:
    server: docker.io
    tag: "3.4.0"
    pullSecrets: []
    pullPolicy: Always
  jsonLogs: false
  # set the TB_SERVICE_TYPE ENV to be monolith or tb-core or tb-rule-engine
  servicetype: monolith

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - chart-example.local
  # Enable or disable tls, same host as above
  tls: false
  

node:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  loadDemo: false
  replicaCount: 1
  image:
    repository: thingsboard/tb-node
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  port:
    http: 8080
    rpc: 9090
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 8080
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  

jsexecutor:
  # kind can be either Deployment or StatefulSet
  kind: Deployment
  image:
    repository: thingsboard/tb-js-executor
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 5
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

mqtt:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  image:
    repository: thingsboard/tb-mqtt-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 1
  ssl:
    enabled: false
    secret: kubernetes-secret
  port:
    number: 8081
    protocol: TCP
    name: mqtt
  timeout: 10000
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8883
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

http:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  image:
    repository: thingsboard/tb-http-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 1
  port:
    number: 8082
    protocol: TCP
    name: http
  timeout: 10000
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8082
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

coap:
  # kind can be either Deployment or StatefulSet
  kind: StatefulSet
  image:
    repository: thingsboard/tb-coap-transport
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 1
  port:
    number: 8083
    protocol: UDP
    name: coap
  timeout: 10000
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8083
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

webui:
  # kind can be either Deployment or StatefulSet
  kind: Deployment
  image:
    repository: thingsboard/tb-web-ui
    # Overrides the global image values
    #server: docker.io
    #pullPolicy: Always
    #tag: "X.Y.Z"
  replicaCount: 1
  port:
    number: 8084
    protocol: TCP
    name: http
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8084
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

cassandraInitDB:
  keyspace: thingsboard
  replication:
    class: SimpleStrategy
    factor: 1

cassandra:
  # Database can be either postgres or hybrid (entities in postgres and timeseries in cassandra)
  # for an postgresql database set cassandra.enabled as false
  # for an hybrid database set cassandra.enabled as true
  enabled: false
  replicaCount: 1
  dbUser:
    password: setplease

postgresql-ha:
  nameOverride: pg
  postgresql:
    database: thingsboard
    replicaCount: 1
    password: setplease
    repmgrPassword: setplease
  postgresqlImage:
    tag: 12
  pgpool:
    adminPassword: setplease
    replicaCount: 1
    useLoadBalancing: false
  pgpoolImage:
    tag: 4

redis:
  # Set architecture to either standalone or replication
  architecture: standalone
  auth:
    password: setplease
  master:
    kind: Deployment
    persistence:
      enabled: false
    disableCommands:
      - FLUSHALL
  replica:
    replicaCount: 0
    persistence:
      enabled: false

kafka:
  persistence:
    enabled: false
  zookeeper:
    persistence:
      enabled: false

#Enable metrics for prometheus, add environment variables to tb-node pod
metrics:
  enabled: false
  # if metrics are enabled, need to set the endponts expose to prometheus
  # endpoints:
  #   expose: prometheus
