#
# Copyright Â© 2016-2020 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: tb-zookeeper
  namespace: thingsboard
data:
  start-node.sh: |
    #!/bin/sh
    set -ex;
    mkdir -p "$ZOO_DATA_LOG_DIR" "$ZOO_DATA_DIR" "$ZOO_CONF_DIR";
    echo $HOSTNAME| rev | cut -d "-" -f1 | rev > "$ZOO_DATA_DIR/myid"
    /apache-zookeeper-3.5.7-bin/bin/zkServer.sh start-foreground /conf/zoo.cfg
  zoo.cfg: |+
    dataDir=/data
    dataLogDir=/datalog
    tickTime=2000
    initLimit=5
    syncLimit=2
    maxClientCnxns=200
    standaloneEnabled=true
    server.0=zookeeper-0.zookeeper.thingsboard.svc.cluster.local:2888:3888;2181
  log4j.properties: |+
    zookeeper.root.logger=INFO, CONSOLE
    zookeeper.console.threshold=INFO
    log4j.rootLogger=${zookeeper.root.logger}
    log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
    log4j.appender.CONSOLE.Threshold=${zookeeper.console.threshold}
    log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
    log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  serviceName: "zookeeper"
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          imagePullPolicy: Always
          image: zookeeper:3.5.7
          ports:
            - containerPort: 2181
              name: client
            - containerPort: 2888
              name: server
            - containerPort: 3888
              name: election
          command: ["/conf/start-node.sh"]
          readinessProbe:
            periodSeconds: 60
            tcpSocket:
              port: 2181
          livenessProbe:
            periodSeconds: 60
            tcpSocket:
              port: 2181
          env:
            - name: JVMFLAGS
              value: "-Dzookeeper.electionPortBindRetry=0"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: conf
              mountPath: /conf
              readOnly: false
            - name: data
              mountPath: /data
              readOnly: false
            - name: datalog
              mountPath: /datalog
              readOnly: false
      volumes:
        - name: conf
          configMap:
            name: tb-zookeeper
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 100Mi
    - metadata:
        name: datalog
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: thingsboard
spec:
  type: ClusterIP
  ports:
    - port: 2181
      targetPort: 2181
      name: client
    - port: 2888
      targetPort: 2888
      name: server
    - port: 3888
      targetPort: 3888
      name: election
  clusterIP: None
  selector:
    app: zookeeper
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tb-kafka
  namespace: thingsboard
data:
  start-node.sh: |
    #!/bin/sh
    cp /tmp/tools-log4j.properties /opt/kafka/config/tools-log4j.properties
    cp /tmp/log4j.properties /opt/kafka/config/log4j.properties
    /usr/bin/start-kafka.sh
  tools-log4j.properties: |+
    log4j.rootLogger=WARN, stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
  log4j.properties: |+
    log4j.rootLogger=INFO, stdout

    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

    # Change the line below to adjust ZK client logging
    log4j.logger.org.apache.zookeeper=INFO

    # Change the two lines below to adjust the general broker logging level (output to server.log and stdout)
    log4j.logger.kafka=INFO
    log4j.logger.org.apache.kafka=INFO

    # Change to DEBUG or TRACE to enable request logging
    log4j.logger.kafka.request.logger=WARN, stdout
    log4j.additivity.kafka.request.logger=false
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  serviceName: "tb-kafka"
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: tb-kafka
  template:
    metadata:
      labels:
        app: tb-kafka
    spec:
      containers:
        - name: server
          imagePullPolicy: Always
          image: wurstmeister/kafka:2.12-2.2.1
          ports:
            - containerPort: 9092
              name: kafka-int
          command: ["/tmp/start-node.sh"]
          readinessProbe:
            periodSeconds: 20
            tcpSocket:
              port: 9092
          livenessProbe:
            initialDelaySeconds: 25
            periodSeconds: 5
            tcpSocket:
              port: 9092
          env:
            - name: BROKER_ID_COMMAND
              value: "hostname | cut -d'-' -f3"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_LISTENERS
              value: "INSIDE://:9092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INSIDE://:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INSIDE:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INSIDE"
            - name: KAFKA_CREATE_TOPICS
              value: "js_eval.requests:100:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,tb_transport.api.requests:30:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600,tb_rule_engine:30:1:delete --config=retention.ms=60000 --config=segment.bytes=26214400 --config=retention.bytes=104857600"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "false"
            - name: KAFKA_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "268435456"
            - name: KAFKA_LOG_RETENTION_MS
              value: "300000"
            - name: KAFKA_LOG_CLEANUP_POLICY
              value: "delete"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "3000"
            - name: KAFKA_PORT
              value: "9092"
            - name: KAFKA_LOG_DIRS
              value: "/kafka-logs"
          volumeMounts:
            - name: logs
              mountPath: /kafka-logs
              readOnly: false
            - name: start
              mountPath: /tmp
              readOnly: false
            - name: app-logs
              mountPath: /opt/kafka/logs
              readOnly: false
            - name: config
              mountPath: /opt/kafka/config
              readOnly: false
      volumes:
        - name: start
          configMap:
            name: tb-kafka
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: logs
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 200Mi
    - metadata:
        name: app-logs
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 200Mi
    - metadata:
        name: config
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: tb-kafka
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-kafka
  ports:
    - port: 9092
      name: kafka-int
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  selector:
    matchLabels:
      app: tb-redis
  template:
    metadata:
      labels:
        app: tb-redis
    spec:
      containers:
        - name: server
          imagePullPolicy: Always
          image: redis:4.0
          ports:
            - containerPort: 6379
          readinessProbe:
            periodSeconds: 5
            tcpSocket:
              port: 6379
          livenessProbe:
            periodSeconds: 5
            tcpSocket:
              port: 6379
          volumeMounts:
            - mountPath: /data
              name: redis-data
      volumes:
        - name: redis-data
          emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-redis
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-redis
  ports:
    - name: tb-redis-port
      port: 6379
---